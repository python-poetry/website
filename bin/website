#!/usr/bin/env python
from __future__ import annotations

import os
import shutil
import stat
import subprocess
import tempfile

from contextlib import contextmanager
from pathlib import Path
from typing import Any
from typing import Iterator

import httpx
import tomli
import tomli_w
import yaml

from cleo.application import Application
from cleo.commands.command import Command
from cleo.helpers import option


API_BASE_URL = "https://api.github.com/repos/python-poetry/poetry"
BRANCHES_URL = f"{API_BASE_URL}/branches"


def _del_ro(action: Any, name: str, exc: Any) -> None:
    os.chmod(name, stat.S_IWRITE)
    os.remove(name)


@contextmanager
def temporary_directory(*args: Any, **kwargs: Any) -> Iterator[str]:
    name = tempfile.mkdtemp(*args, **kwargs)

    yield name

    shutil.rmtree(name, onerror=_del_ro)


def get_branches() -> list[str]:
    return [
        branch["name"]
        for branch in httpx.get(BRANCHES_URL).json()
        if branch["name"] in {"master", "main"}
    ]


class ConfigureCommand(Command):
    name = "configure"
    description = "Generate website config.toml file."
    options = [option("local", None, "Build from local Poetry source.", flag=False)]

    @staticmethod
    def get_configuration(file: Path | None = None) -> dict[str, Any]:
        if file is None:
            file = Path(__file__).parent.parent.joinpath("pyproject.toml")

        return tomli.loads(file.read_text())["tool"]["website"]

    def render(self, file: Path | None = None) -> None:
        if file is None:
            file = Path(__file__).parent.parent.joinpath("config.toml")

        content = self.get_configuration()
        config = content["config"]

        if self.option("local"):
            config["params"]["documentation"]["defaultVersion"] = "development"
            config["params"]["documentation"]["versions"] = ["development"]
        else:
            versions = content["versions"]
            branches = get_branches()
            config["params"]["documentation"]["versions"] = [
                *branches,
                *versions.keys(),
            ]

        if file.exists():
            file.unlink()

        file.write_text(tomli_w.dumps(config))
        return config

    def handle(self) -> int:
        self.render()
        return 0


class DocsPullCommand(ConfigureCommand):

    DESTINATION: Path = Path(__file__).parent.parent.joinpath("content/docs")
    REPOSITORY = "https://github.com/python-poetry/poetry.git"

    name = "docs pull"

    description = "Pull the latest version of the documentation."

    def handle(self) -> int:
        content = self.get_configuration()

        versions = content["versions"]
        branches = get_branches()
        default_version = content["config"]["params"]["documentation"]["defaultVersion"]

        if self.DESTINATION.exists():
            shutil.rmtree(self.DESTINATION)

        self.DESTINATION.mkdir(parents=True)

        if self.option("local"):
            self._pull_local_version(Path(self.option("local")), self.DESTINATION)
            return 0

        for name, version in versions.items():
            is_default = default_version == name
            self._pull_version(
                version, dest=self.DESTINATION, name=name, is_default=is_default
            )

        for branch in branches:
            is_default = default_version == branch
            self._pull_version(branch, dest=self.DESTINATION, is_default=is_default)

        return 0

    @staticmethod
    def _pull_local_version(src: Path, dest: Path) -> None:
        # Copy files at the root of the destination
        for filepath in Path(src).joinpath("docs").glob("*.md"):
            shutil.copyfile(filepath, dest.joinpath(filepath.name))

    def _pull_version(
        self,
        version: str,
        dest: Path,
        name: str | None = None,
        is_default: bool = False,
    ) -> None:
        self.line("")

        suffix = f" as <b>{name}</b>" if name else ""
        self.line(f"  Pulling documentation for version <b>{version}</b>{suffix}")

        cwd = Path.cwd()
        path = dest.joinpath(name if name else version)

        try:
            if path.exists():
                shutil.rmtree(path.as_posix())

            with temporary_directory() as tmp_dir:
                os.chdir(tmp_dir)
                tmp_dir = Path(tmp_dir)
                subprocess.run(
                    [
                        "git",
                        "clone",
                        "--single-branch",
                        "--branch",
                        version,
                        "--depth",
                        "1",
                        "--filter=blob:none",
                        "--sparse",
                        self.REPOSITORY,
                        ".",
                    ]
                )
                subprocess.run(["git", "sparse-checkout", "init", "--cone"])
                subprocess.run(["git", "sparse-checkout", "set", "docs"])

                if is_default:
                    self._pull_local_version(tmp_dir, dest)
                else:
                    path.mkdir()

                    for filepath in Path(tmp_dir).joinpath("docs").glob("*.md"):
                        with filepath.open() as f:
                            content = f.read()
                            # Load front matter data
                            _, frontmatter, content = content.split("---", maxsplit=2)
                            frontmatter = yaml.safe_load(frontmatter)
                            frontmatter["title"] += f" | {version}"
                            new_frontmatter = yaml.dump(frontmatter).strip()

                        new_content = f"---\n{new_frontmatter}\n---\n{content}"

                        with path.joinpath(filepath.name).open("w") as f:
                            f.write(new_content)
        finally:
            os.chdir(cwd.as_posix())


class BuildCommand(DocsPullCommand):
    name = "build"
    description = "Render website configuration and generate assets"

    def handle(self) -> int:
        self.render()
        return super().handle()


app = Application()
app.add(ConfigureCommand())
app.add(DocsPullCommand())
app.add(BuildCommand())


if __name__ == "__main__":
    app.run()
